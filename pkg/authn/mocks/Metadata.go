// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Metadata is an autogenerated mock type for the Metadata type
type Metadata struct {
	mock.Mock
}

type Metadata_Expecter struct {
	mock *mock.Mock
}

func (_m *Metadata) EXPECT() *Metadata_Expecter {
	return &Metadata_Expecter{mock: &_m.Mock}
}

// Append provides a mock function with given fields: k, vals
func (_m *Metadata) Append(k string, vals ...string) {
	_va := make([]interface{}, len(vals))
	for _i := range vals {
		_va[_i] = vals[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, k)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Metadata_Append_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Append'
type Metadata_Append_Call struct {
	*mock.Call
}

// Append is a helper method to define mock.On call
//   - k string
//   - vals ...string
func (_e *Metadata_Expecter) Append(k interface{}, vals ...interface{}) *Metadata_Append_Call {
	return &Metadata_Append_Call{Call: _e.mock.On("Append",
		append([]interface{}{k}, vals...)...)}
}

func (_c *Metadata_Append_Call) Run(run func(k string, vals ...string)) *Metadata_Append_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Metadata_Append_Call) Return() *Metadata_Append_Call {
	_c.Call.Return()
	return _c
}

func (_c *Metadata_Append_Call) RunAndReturn(run func(string, ...string)) *Metadata_Append_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: k
func (_m *Metadata) Delete(k string) {
	_m.Called(k)
}

// Metadata_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Metadata_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - k string
func (_e *Metadata_Expecter) Delete(k interface{}) *Metadata_Delete_Call {
	return &Metadata_Delete_Call{Call: _e.mock.On("Delete", k)}
}

func (_c *Metadata_Delete_Call) Run(run func(k string)) *Metadata_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Metadata_Delete_Call) Return() *Metadata_Delete_Call {
	_c.Call.Return()
	return _c
}

func (_c *Metadata_Delete_Call) RunAndReturn(run func(string)) *Metadata_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: k
func (_m *Metadata) Get(k string) []string {
	ret := _m.Called(k)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(k)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Metadata_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Metadata_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - k string
func (_e *Metadata_Expecter) Get(k interface{}) *Metadata_Get_Call {
	return &Metadata_Get_Call{Call: _e.mock.On("Get", k)}
}

func (_c *Metadata_Get_Call) Run(run func(k string)) *Metadata_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Metadata_Get_Call) Return(_a0 []string) *Metadata_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Metadata_Get_Call) RunAndReturn(run func(string) []string) *Metadata_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Len provides a mock function with given fields:
func (_m *Metadata) Len() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Metadata_Len_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Len'
type Metadata_Len_Call struct {
	*mock.Call
}

// Len is a helper method to define mock.On call
func (_e *Metadata_Expecter) Len() *Metadata_Len_Call {
	return &Metadata_Len_Call{Call: _e.mock.On("Len")}
}

func (_c *Metadata_Len_Call) Run(run func()) *Metadata_Len_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Metadata_Len_Call) Return(_a0 int) *Metadata_Len_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Metadata_Len_Call) RunAndReturn(run func() int) *Metadata_Len_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: k, vals
func (_m *Metadata) Set(k string, vals ...string) {
	_va := make([]interface{}, len(vals))
	for _i := range vals {
		_va[_i] = vals[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, k)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Metadata_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type Metadata_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - k string
//   - vals ...string
func (_e *Metadata_Expecter) Set(k interface{}, vals ...interface{}) *Metadata_Set_Call {
	return &Metadata_Set_Call{Call: _e.mock.On("Set",
		append([]interface{}{k}, vals...)...)}
}

func (_c *Metadata_Set_Call) Run(run func(k string, vals ...string)) *Metadata_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Metadata_Set_Call) Return() *Metadata_Set_Call {
	_c.Call.Return()
	return _c
}

func (_c *Metadata_Set_Call) RunAndReturn(run func(string, ...string)) *Metadata_Set_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMetadata interface {
	mock.TestingT
	Cleanup(func())
}

// NewMetadata creates a new instance of Metadata. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMetadata(t mockConstructorTestingTNewMetadata) *Metadata {
	mock := &Metadata{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
