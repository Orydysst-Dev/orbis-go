// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"

	authn "github.com/sourcenetwork/orbis-go/pkg/authn"

	mock "github.com/stretchr/testify/mock"
)

// RequestMetadataParser is an autogenerated mock type for the RequestMetadataParser type
type RequestMetadataParser struct {
	mock.Mock
}

type RequestMetadataParser_Expecter struct {
	mock *mock.Mock
}

func (_m *RequestMetadataParser) EXPECT() *RequestMetadataParser_Expecter {
	return &RequestMetadataParser_Expecter{mock: &_m.Mock}
}

// Parse provides a mock function with given fields: ctx
func (_m *RequestMetadataParser) Parse(ctx context.Context) (authn.Metadata, bool) {
	ret := _m.Called(ctx)

	var r0 authn.Metadata
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context) (authn.Metadata, bool)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) authn.Metadata); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(authn.Metadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) bool); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// RequestMetadataParser_Parse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Parse'
type RequestMetadataParser_Parse_Call struct {
	*mock.Call
}

// Parse is a helper method to define mock.On call
//   - ctx context.Context
func (_e *RequestMetadataParser_Expecter) Parse(ctx interface{}) *RequestMetadataParser_Parse_Call {
	return &RequestMetadataParser_Parse_Call{Call: _e.mock.On("Parse", ctx)}
}

func (_c *RequestMetadataParser_Parse_Call) Run(run func(ctx context.Context)) *RequestMetadataParser_Parse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *RequestMetadataParser_Parse_Call) Return(_a0 authn.Metadata, _a1 bool) *RequestMetadataParser_Parse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RequestMetadataParser_Parse_Call) RunAndReturn(run func(context.Context) (authn.Metadata, bool)) *RequestMetadataParser_Parse_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewRequestMetadataParser interface {
	mock.TestingT
	Cleanup(func())
}

// NewRequestMetadataParser creates a new instance of RequestMetadataParser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRequestMetadataParser(t mockConstructorTestingTNewRequestMetadataParser) *RequestMetadataParser {
	mock := &RequestMetadataParser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
