// Code generated by protoc-gen-cobra. DO NOT EDIT.

package ringv1alpha1

import (
	client "github.com/NathanBaulch/protoc-gen-cobra/client"
	flag "github.com/NathanBaulch/protoc-gen-cobra/flag"
	iocodec "github.com/NathanBaulch/protoc-gen-cobra/iocodec"
	cobra "github.com/spf13/cobra"
	grpc "google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
)

func RingServiceClientCommand(options ...client.Option) *cobra.Command {
	cfg := client.NewConfig(options...)
	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("RingService"),
		Short: "RingService service client",
		Long:  "",
	}
	cfg.BindFlags(cmd.PersistentFlags())
	cmd.AddCommand(
		_RingServiceListRingsCommand(cfg),
		_RingServiceGetRingCommand(cfg),
		_RingServiceCreateRingCommand(cfg),
		_RingServiceDeleteRingCommand(cfg),
	)
	return cmd
}

func _RingServiceListRingsCommand(cfg *client.Config) *cobra.Command {
	req := &ListRingsRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("ListRings"),
		Short: "ListRings RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService", "ListRings"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewRingServiceClient(cc)
				v := &ListRingsRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.ListRings(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.Key, cfg.FlagNamer("Key"), "", "")

	return cmd
}

func _RingServiceGetRingCommand(cfg *client.Config) *cobra.Command {
	req := &GetRingRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("GetRing"),
		Short: "GetRing RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService", "GetRing"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewRingServiceClient(cc)
				v := &GetRingRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.GetRing(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.Key, cfg.FlagNamer("Key"), "", "")

	return cmd
}

func _RingServiceCreateRingCommand(cfg *client.Config) *cobra.Command {
	req := &CreateRingRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("CreateRing"),
		Short: "CreateRing RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService", "CreateRing"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewRingServiceClient(cc)
				v := &CreateRingRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.CreateRing(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.Key, cfg.FlagNamer("Key"), "", "")
	cmd.PersistentFlags().StringVar(&req.Value, cfg.FlagNamer("Value"), "", "")

	return cmd
}

func _RingServiceDeleteRingCommand(cfg *client.Config) *cobra.Command {
	req := &DeleteRingRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("DeleteRing"),
		Short: "DeleteRing RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService", "DeleteRing"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewRingServiceClient(cc)
				v := &DeleteRingRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.DeleteRing(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.Key, cfg.FlagNamer("Key"), "", "")

	return cmd
}
