// Code generated by protoc-gen-cobra. DO NOT EDIT.

package utilityv1alpha1

import (
	client "github.com/NathanBaulch/protoc-gen-cobra/client"
	flag "github.com/NathanBaulch/protoc-gen-cobra/flag"
	iocodec "github.com/NathanBaulch/protoc-gen-cobra/iocodec"
	cobra "github.com/spf13/cobra"
	grpc "google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
)

func UtilityServiceClientCommand(options ...client.Option) *cobra.Command {
	cfg := client.NewConfig(options...)
	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("UtilityService"),
		Short: "UtilityService service client",
		Long:  "",
	}
	cfg.BindFlags(cmd.PersistentFlags())
	cmd.AddCommand(
		_UtilityServiceCreateDIDCommand(cfg),
		_UtilityServiceCreateJWTCommand(cfg),
		_UtilityServiceCreateKeypairCommand(cfg),
		_UtilityServiceEncryptSecretCommand(cfg),
		_UtilityServiceDecryptSecretCommand(cfg),
	)
	return cmd
}

func _UtilityServiceCreateDIDCommand(cfg *client.Config) *cobra.Command {
	req := &CreateDIDRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("CreateDID"),
		Short: "CreateDID RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "UtilityService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "UtilityService", "CreateDID"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewUtilityServiceClient(cc)
				v := &CreateDIDRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.CreateDID(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.KeyType, cfg.FlagNamer("KeyType"), "", "")
	flag.BytesBase64Var(cmd.PersistentFlags(), &req.PublicKey, cfg.FlagNamer("PublicKey"), "")

	return cmd
}

func _UtilityServiceCreateJWTCommand(cfg *client.Config) *cobra.Command {
	req := &CreateJWTRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("CreateJWT"),
		Short: "CreateJWT RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "UtilityService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "UtilityService", "CreateJWT"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewUtilityServiceClient(cc)
				v := &CreateJWTRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.CreateJWT(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.Kid, cfg.FlagNamer("Kid"), "", "")
	cmd.PersistentFlags().StringVar(&req.Claims, cfg.FlagNamer("Claims"), "", "")
	cmd.PersistentFlags().StringVar(&req.KeyType, cfg.FlagNamer("KeyType"), "", "")
	flag.BytesBase64Var(cmd.PersistentFlags(), &req.PrivateKey, cfg.FlagNamer("PrivateKey"), "")

	return cmd
}

func _UtilityServiceCreateKeypairCommand(cfg *client.Config) *cobra.Command {
	req := &CreateKeypairRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("CreateKeypair"),
		Short: "CreateKeypair RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "UtilityService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "UtilityService", "CreateKeypair"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewUtilityServiceClient(cc)
				v := &CreateKeypairRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.CreateKeypair(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.KeyType, cfg.FlagNamer("KeyType"), "", "")
	cmd.PersistentFlags().StringVar(&req.RandReader, cfg.FlagNamer("RandReader"), "", "")

	return cmd
}

func _UtilityServiceEncryptSecretCommand(cfg *client.Config) *cobra.Command {
	req := &EncryptSecretRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("EncryptSecret"),
		Short: "EncryptSecret RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "UtilityService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "UtilityService", "EncryptSecret"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewUtilityServiceClient(cc)
				v := &EncryptSecretRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.EncryptSecret(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.KeyType, cfg.FlagNamer("KeyType"), "", "")
	flag.BytesBase64Var(cmd.PersistentFlags(), &req.DkgPk, cfg.FlagNamer("DkgPk"), "")
	flag.BytesBase64Var(cmd.PersistentFlags(), &req.Scrt, cfg.FlagNamer("Scrt"), "")

	return cmd
}

func _UtilityServiceDecryptSecretCommand(cfg *client.Config) *cobra.Command {
	req := &DecryptSecretRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("DecryptSecret"),
		Short: "DecryptSecret RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "UtilityService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "UtilityService", "DecryptSecret"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewUtilityServiceClient(cc)
				v := &DecryptSecretRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.DecryptSecret(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.KeyType, cfg.FlagNamer("KeyType"), "", "")
	flag.BytesBase64SliceVar(cmd.PersistentFlags(), &req.EncScrt, cfg.FlagNamer("EncScrt"), "")
	flag.BytesBase64Var(cmd.PersistentFlags(), &req.XncCmt, cfg.FlagNamer("XncCmt"), "")
	flag.BytesBase64Var(cmd.PersistentFlags(), &req.RdrSk, cfg.FlagNamer("RdrSk"), "")
	flag.BytesBase64Var(cmd.PersistentFlags(), &req.DkgPk, cfg.FlagNamer("DkgPk"), "")

	return cmd
}
