// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: orbis/utility/v1alpha1/utility.proto

package utilityv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UtilityService_CreateDID_FullMethodName           = "/orbis.utility.v1alpha1.UtilityService/CreateDID"
	UtilityService_CreateBech32Address_FullMethodName = "/orbis.utility.v1alpha1.UtilityService/CreateBech32Address"
	UtilityService_CreateJWT_FullMethodName           = "/orbis.utility.v1alpha1.UtilityService/CreateJWT"
	UtilityService_CreateKeypair_FullMethodName       = "/orbis.utility.v1alpha1.UtilityService/CreateKeypair"
	UtilityService_EncryptSecret_FullMethodName       = "/orbis.utility.v1alpha1.UtilityService/EncryptSecret"
	UtilityService_DecryptSecret_FullMethodName       = "/orbis.utility.v1alpha1.UtilityService/DecryptSecret"
	UtilityService_ACPCreatePolicy_FullMethodName     = "/orbis.utility.v1alpha1.UtilityService/ACPCreatePolicy"
	UtilityService_ACPRegisterObject_FullMethodName   = "/orbis.utility.v1alpha1.UtilityService/ACPRegisterObject"
	UtilityService_ACPSetRelationship_FullMethodName  = "/orbis.utility.v1alpha1.UtilityService/ACPSetRelationship"
)

// UtilityServiceClient is the client API for UtilityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UtilityServiceClient interface {
	CreateDID(ctx context.Context, in *CreateDIDRequest, opts ...grpc.CallOption) (*CreateDIDResponse, error)
	CreateBech32Address(ctx context.Context, in *CreateBech32AddressRequest, opts ...grpc.CallOption) (*CreateBech32AddressResponse, error)
	CreateJWT(ctx context.Context, in *CreateJWTRequest, opts ...grpc.CallOption) (*CreateJWTResponse, error)
	CreateKeypair(ctx context.Context, in *CreateKeypairRequest, opts ...grpc.CallOption) (*CreateKeypairResponse, error)
	EncryptSecret(ctx context.Context, in *EncryptSecretRequest, opts ...grpc.CallOption) (*EncryptSecretResponse, error)
	DecryptSecret(ctx context.Context, in *DecryptSecretRequest, opts ...grpc.CallOption) (*DecryptSecretResponse, error)
	ACPCreatePolicy(ctx context.Context, in *ACPCreatePolicyRequest, opts ...grpc.CallOption) (*ACPCreatePolicyResponse, error)
	ACPRegisterObject(ctx context.Context, in *ACPRegisterObjectRequest, opts ...grpc.CallOption) (*ACPRegisterObjectResponse, error)
	ACPSetRelationship(ctx context.Context, in *ACPSetRelationshipRequest, opts ...grpc.CallOption) (*ACPSetRelationshipResponse, error)
}

type utilityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUtilityServiceClient(cc grpc.ClientConnInterface) UtilityServiceClient {
	return &utilityServiceClient{cc}
}

func (c *utilityServiceClient) CreateDID(ctx context.Context, in *CreateDIDRequest, opts ...grpc.CallOption) (*CreateDIDResponse, error) {
	out := new(CreateDIDResponse)
	err := c.cc.Invoke(ctx, UtilityService_CreateDID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilityServiceClient) CreateBech32Address(ctx context.Context, in *CreateBech32AddressRequest, opts ...grpc.CallOption) (*CreateBech32AddressResponse, error) {
	out := new(CreateBech32AddressResponse)
	err := c.cc.Invoke(ctx, UtilityService_CreateBech32Address_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilityServiceClient) CreateJWT(ctx context.Context, in *CreateJWTRequest, opts ...grpc.CallOption) (*CreateJWTResponse, error) {
	out := new(CreateJWTResponse)
	err := c.cc.Invoke(ctx, UtilityService_CreateJWT_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilityServiceClient) CreateKeypair(ctx context.Context, in *CreateKeypairRequest, opts ...grpc.CallOption) (*CreateKeypairResponse, error) {
	out := new(CreateKeypairResponse)
	err := c.cc.Invoke(ctx, UtilityService_CreateKeypair_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilityServiceClient) EncryptSecret(ctx context.Context, in *EncryptSecretRequest, opts ...grpc.CallOption) (*EncryptSecretResponse, error) {
	out := new(EncryptSecretResponse)
	err := c.cc.Invoke(ctx, UtilityService_EncryptSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilityServiceClient) DecryptSecret(ctx context.Context, in *DecryptSecretRequest, opts ...grpc.CallOption) (*DecryptSecretResponse, error) {
	out := new(DecryptSecretResponse)
	err := c.cc.Invoke(ctx, UtilityService_DecryptSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilityServiceClient) ACPCreatePolicy(ctx context.Context, in *ACPCreatePolicyRequest, opts ...grpc.CallOption) (*ACPCreatePolicyResponse, error) {
	out := new(ACPCreatePolicyResponse)
	err := c.cc.Invoke(ctx, UtilityService_ACPCreatePolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilityServiceClient) ACPRegisterObject(ctx context.Context, in *ACPRegisterObjectRequest, opts ...grpc.CallOption) (*ACPRegisterObjectResponse, error) {
	out := new(ACPRegisterObjectResponse)
	err := c.cc.Invoke(ctx, UtilityService_ACPRegisterObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilityServiceClient) ACPSetRelationship(ctx context.Context, in *ACPSetRelationshipRequest, opts ...grpc.CallOption) (*ACPSetRelationshipResponse, error) {
	out := new(ACPSetRelationshipResponse)
	err := c.cc.Invoke(ctx, UtilityService_ACPSetRelationship_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UtilityServiceServer is the server API for UtilityService service.
// All implementations must embed UnimplementedUtilityServiceServer
// for forward compatibility
type UtilityServiceServer interface {
	CreateDID(context.Context, *CreateDIDRequest) (*CreateDIDResponse, error)
	CreateBech32Address(context.Context, *CreateBech32AddressRequest) (*CreateBech32AddressResponse, error)
	CreateJWT(context.Context, *CreateJWTRequest) (*CreateJWTResponse, error)
	CreateKeypair(context.Context, *CreateKeypairRequest) (*CreateKeypairResponse, error)
	EncryptSecret(context.Context, *EncryptSecretRequest) (*EncryptSecretResponse, error)
	DecryptSecret(context.Context, *DecryptSecretRequest) (*DecryptSecretResponse, error)
	ACPCreatePolicy(context.Context, *ACPCreatePolicyRequest) (*ACPCreatePolicyResponse, error)
	ACPRegisterObject(context.Context, *ACPRegisterObjectRequest) (*ACPRegisterObjectResponse, error)
	ACPSetRelationship(context.Context, *ACPSetRelationshipRequest) (*ACPSetRelationshipResponse, error)
	mustEmbedUnimplementedUtilityServiceServer()
}

// UnimplementedUtilityServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUtilityServiceServer struct {
}

func (UnimplementedUtilityServiceServer) CreateDID(context.Context, *CreateDIDRequest) (*CreateDIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDID not implemented")
}
func (UnimplementedUtilityServiceServer) CreateBech32Address(context.Context, *CreateBech32AddressRequest) (*CreateBech32AddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBech32Address not implemented")
}
func (UnimplementedUtilityServiceServer) CreateJWT(context.Context, *CreateJWTRequest) (*CreateJWTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJWT not implemented")
}
func (UnimplementedUtilityServiceServer) CreateKeypair(context.Context, *CreateKeypairRequest) (*CreateKeypairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKeypair not implemented")
}
func (UnimplementedUtilityServiceServer) EncryptSecret(context.Context, *EncryptSecretRequest) (*EncryptSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptSecret not implemented")
}
func (UnimplementedUtilityServiceServer) DecryptSecret(context.Context, *DecryptSecretRequest) (*DecryptSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecryptSecret not implemented")
}
func (UnimplementedUtilityServiceServer) ACPCreatePolicy(context.Context, *ACPCreatePolicyRequest) (*ACPCreatePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ACPCreatePolicy not implemented")
}
func (UnimplementedUtilityServiceServer) ACPRegisterObject(context.Context, *ACPRegisterObjectRequest) (*ACPRegisterObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ACPRegisterObject not implemented")
}
func (UnimplementedUtilityServiceServer) ACPSetRelationship(context.Context, *ACPSetRelationshipRequest) (*ACPSetRelationshipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ACPSetRelationship not implemented")
}
func (UnimplementedUtilityServiceServer) mustEmbedUnimplementedUtilityServiceServer() {}

// UnsafeUtilityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UtilityServiceServer will
// result in compilation errors.
type UnsafeUtilityServiceServer interface {
	mustEmbedUnimplementedUtilityServiceServer()
}

func RegisterUtilityServiceServer(s grpc.ServiceRegistrar, srv UtilityServiceServer) {
	s.RegisterService(&UtilityService_ServiceDesc, srv)
}

func _UtilityService_CreateDID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilityServiceServer).CreateDID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UtilityService_CreateDID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilityServiceServer).CreateDID(ctx, req.(*CreateDIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UtilityService_CreateBech32Address_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBech32AddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilityServiceServer).CreateBech32Address(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UtilityService_CreateBech32Address_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilityServiceServer).CreateBech32Address(ctx, req.(*CreateBech32AddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UtilityService_CreateJWT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJWTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilityServiceServer).CreateJWT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UtilityService_CreateJWT_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilityServiceServer).CreateJWT(ctx, req.(*CreateJWTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UtilityService_CreateKeypair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeypairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilityServiceServer).CreateKeypair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UtilityService_CreateKeypair_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilityServiceServer).CreateKeypair(ctx, req.(*CreateKeypairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UtilityService_EncryptSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilityServiceServer).EncryptSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UtilityService_EncryptSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilityServiceServer).EncryptSecret(ctx, req.(*EncryptSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UtilityService_DecryptSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilityServiceServer).DecryptSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UtilityService_DecryptSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilityServiceServer).DecryptSecret(ctx, req.(*DecryptSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UtilityService_ACPCreatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ACPCreatePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilityServiceServer).ACPCreatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UtilityService_ACPCreatePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilityServiceServer).ACPCreatePolicy(ctx, req.(*ACPCreatePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UtilityService_ACPRegisterObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ACPRegisterObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilityServiceServer).ACPRegisterObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UtilityService_ACPRegisterObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilityServiceServer).ACPRegisterObject(ctx, req.(*ACPRegisterObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UtilityService_ACPSetRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ACPSetRelationshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilityServiceServer).ACPSetRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UtilityService_ACPSetRelationship_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilityServiceServer).ACPSetRelationship(ctx, req.(*ACPSetRelationshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UtilityService_ServiceDesc is the grpc.ServiceDesc for UtilityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UtilityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orbis.utility.v1alpha1.UtilityService",
	HandlerType: (*UtilityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDID",
			Handler:    _UtilityService_CreateDID_Handler,
		},
		{
			MethodName: "CreateBech32Address",
			Handler:    _UtilityService_CreateBech32Address_Handler,
		},
		{
			MethodName: "CreateJWT",
			Handler:    _UtilityService_CreateJWT_Handler,
		},
		{
			MethodName: "CreateKeypair",
			Handler:    _UtilityService_CreateKeypair_Handler,
		},
		{
			MethodName: "EncryptSecret",
			Handler:    _UtilityService_EncryptSecret_Handler,
		},
		{
			MethodName: "DecryptSecret",
			Handler:    _UtilityService_DecryptSecret_Handler,
		},
		{
			MethodName: "ACPCreatePolicy",
			Handler:    _UtilityService_ACPCreatePolicy_Handler,
		},
		{
			MethodName: "ACPRegisterObject",
			Handler:    _UtilityService_ACPRegisterObject_Handler,
		},
		{
			MethodName: "ACPSetRelationship",
			Handler:    _UtilityService_ACPSetRelationship_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orbis/utility/v1alpha1/utility.proto",
}
