// Code generated by protoc-gen-cobra. DO NOT EDIT.

package ringv1alpha1

import (
	client "github.com/NathanBaulch/protoc-gen-cobra/client"
	flag "github.com/NathanBaulch/protoc-gen-cobra/flag"
	iocodec "github.com/NathanBaulch/protoc-gen-cobra/iocodec"
	cobra "github.com/spf13/cobra"
	grpc "google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
)

func RingServiceClientCommand(options ...client.Option) *cobra.Command {
	cfg := client.NewConfig(options...)
	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("RingService"),
		Short: "RingService service client",
		Long:  "",
	}
	cfg.BindFlags(cmd.PersistentFlags())
	cmd.AddCommand(
		_RingServiceListRingsCommand(cfg),
		_RingServiceGetRingCommand(cfg),
		_RingServiceCreateRingCommand(cfg),
		_RingServiceDeleteRingCommand(cfg),
		_RingServicePublicKeyCommand(cfg),
		_RingServiceRefreshCommand(cfg),
		_RingServiceStateCommand(cfg),
		_RingServiceNodesCommand(cfg),
	)
	return cmd
}

func _RingServiceListRingsCommand(cfg *client.Config) *cobra.Command {
	req := &ListRingsRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("ListRings"),
		Short: "ListRings RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService", "ListRings"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewRingServiceClient(cc)
				v := &ListRingsRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.ListRings(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	return cmd
}

func _RingServiceGetRingCommand(cfg *client.Config) *cobra.Command {
	req := &GetRingRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("GetRing"),
		Short: "GetRing RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService", "GetRing"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewRingServiceClient(cc)
				v := &GetRingRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.GetRing(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.Id, cfg.FlagNamer("Id"), "", "")

	return cmd
}

func _RingServiceCreateRingCommand(cfg *client.Config) *cobra.Command {
	req := &CreateRingRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("CreateRing"),
		Short: "CreateRing RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService", "CreateRing"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewRingServiceClient(cc)
				v := &CreateRingRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.CreateRing(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	_Ring := &Ring{}
	cmd.PersistentFlags().StringVar(&_Ring.Id, cfg.FlagNamer("Ring Id"), "", "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Ring Id"), func() { req.Ring = _Ring })
	cmd.PersistentFlags().Int32Var(&_Ring.N, cfg.FlagNamer("Ring N"), 0, "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Ring N"), func() { req.Ring = _Ring })
	cmd.PersistentFlags().Int32Var(&_Ring.T, cfg.FlagNamer("Ring T"), 0, "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Ring T"), func() { req.Ring = _Ring })
	cmd.PersistentFlags().StringVar(&_Ring.Dkg, cfg.FlagNamer("Ring Dkg"), "", "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Ring Dkg"), func() { req.Ring = _Ring })
	cmd.PersistentFlags().StringVar(&_Ring.Pss, cfg.FlagNamer("Ring Pss"), "", "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Ring Pss"), func() { req.Ring = _Ring })
	cmd.PersistentFlags().StringVar(&_Ring.Pre, cfg.FlagNamer("Ring Pre"), "", "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Ring Pre"), func() { req.Ring = _Ring })
	cmd.PersistentFlags().StringVar(&_Ring.Bulletin, cfg.FlagNamer("Ring Bulletin"), "", "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Ring Bulletin"), func() { req.Ring = _Ring })
	cmd.PersistentFlags().StringVar(&_Ring.Transport, cfg.FlagNamer("Ring Transport"), "", "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Ring Transport"), func() { req.Ring = _Ring })
	flag.SliceVar(cmd.PersistentFlags(), flag.ParseMessageE[*Node], &_Ring.Nodes, cfg.FlagNamer("Ring Nodes"), "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Ring Nodes"), func() { req.Ring = _Ring })

	return cmd
}

func _RingServiceDeleteRingCommand(cfg *client.Config) *cobra.Command {
	req := &DeleteRingRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("DeleteRing"),
		Short: "DeleteRing RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService", "DeleteRing"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewRingServiceClient(cc)
				v := &DeleteRingRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.DeleteRing(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.Id, cfg.FlagNamer("Id"), "", "")

	return cmd
}

func _RingServicePublicKeyCommand(cfg *client.Config) *cobra.Command {
	req := &PublicKeyRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("PublicKey"),
		Short: "PublicKey RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService", "PublicKey"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewRingServiceClient(cc)
				v := &PublicKeyRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.PublicKey(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.Id, cfg.FlagNamer("Id"), "", "")

	return cmd
}

func _RingServiceRefreshCommand(cfg *client.Config) *cobra.Command {
	req := &RefreshRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("Refresh"),
		Short: "Refresh RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService", "Refresh"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewRingServiceClient(cc)
				v := &RefreshRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.Refresh(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.Id, cfg.FlagNamer("Id"), "", "")

	return cmd
}

func _RingServiceStateCommand(cfg *client.Config) *cobra.Command {
	req := &StateRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("State"),
		Short: "State RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService", "State"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewRingServiceClient(cc)
				v := &StateRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.State(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.Id, cfg.FlagNamer("Id"), "", "")

	return cmd
}

func _RingServiceNodesCommand(cfg *client.Config) *cobra.Command {
	req := &NodesRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("Nodes"),
		Short: "Nodes RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService", "Nodes"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewRingServiceClient(cc)
				v := &NodesRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.Nodes(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.Id, cfg.FlagNamer("Id"), "", "")

	return cmd
}
