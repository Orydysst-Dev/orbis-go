// Code generated by protoc-gen-cobra. DO NOT EDIT.

package ringv1alpha1

import (
	client "github.com/NathanBaulch/protoc-gen-cobra/client"
	flag "github.com/NathanBaulch/protoc-gen-cobra/flag"
	iocodec "github.com/NathanBaulch/protoc-gen-cobra/iocodec"
	pb "github.com/libp2p/go-libp2p/core/crypto/pb"
	cobra "github.com/spf13/cobra"
	grpc "google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
)

func RingServiceClientCommand(options ...client.Option) *cobra.Command {
	cfg := client.NewConfig(options...)
	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("RingService"),
		Short: "RingService service client",
		Long:  "",
	}
	cfg.BindFlags(cmd.PersistentFlags())
	cmd.AddCommand(
		_RingServiceListRingsCommand(cfg),
		_RingServiceGetRingCommand(cfg),
		_RingServiceCreateRingCommand(cfg),
		_RingServiceDeleteRingCommand(cfg),
		_RingServicePublicKeyCommand(cfg),
		_RingServiceRefreshCommand(cfg),
		_RingServiceStateCommand(cfg),
		_RingServiceListSecretsCommand(cfg),
		_RingServiceStoreSecretCommand(cfg),
		_RingServiceReencryptSecretCommand(cfg),
		_RingServiceDeleteSecretCommand(cfg),
	)
	return cmd
}

func _RingServiceListRingsCommand(cfg *client.Config) *cobra.Command {
	req := &ListRingsRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("ListRings"),
		Short: "ListRings RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService", "ListRings"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewRingServiceClient(cc)
				v := &ListRingsRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.ListRings(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	return cmd
}

func _RingServiceGetRingCommand(cfg *client.Config) *cobra.Command {
	req := &GetRingRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("GetRing"),
		Short: "GetRing RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService", "GetRing"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewRingServiceClient(cc)
				v := &GetRingRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.GetRing(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.Id, cfg.FlagNamer("Id"), "", "")

	return cmd
}

func _RingServiceCreateRingCommand(cfg *client.Config) *cobra.Command {
	req := &CreateRingRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("CreateRing"),
		Short: "CreateRing RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService", "CreateRing"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewRingServiceClient(cc)
				v := &CreateRingRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.CreateRing(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	_Manifest := &Manifest{}
	cmd.PersistentFlags().Int32Var(&_Manifest.N, cfg.FlagNamer("Manifest N"), 0, "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Manifest N"), func() { req.Manifest = _Manifest })
	cmd.PersistentFlags().Int32Var(&_Manifest.T, cfg.FlagNamer("Manifest T"), 0, "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Manifest T"), func() { req.Manifest = _Manifest })
	cmd.PersistentFlags().StringVar(&_Manifest.Dkg, cfg.FlagNamer("Manifest Dkg"), "", "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Manifest Dkg"), func() { req.Manifest = _Manifest })
	cmd.PersistentFlags().StringVar(&_Manifest.Pss, cfg.FlagNamer("Manifest Pss"), "", "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Manifest Pss"), func() { req.Manifest = _Manifest })
	cmd.PersistentFlags().StringVar(&_Manifest.Pre, cfg.FlagNamer("Manifest Pre"), "", "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Manifest Pre"), func() { req.Manifest = _Manifest })
	cmd.PersistentFlags().StringVar(&_Manifest.Bulletin, cfg.FlagNamer("Manifest Bulletin"), "", "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Manifest Bulletin"), func() { req.Manifest = _Manifest })
	cmd.PersistentFlags().StringVar(&_Manifest.Transport, cfg.FlagNamer("Manifest Transport"), "", "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Manifest Transport"), func() { req.Manifest = _Manifest })
	flag.SliceVar(cmd.PersistentFlags(), flag.ParseMessageE[*Node], &_Manifest.Nodes, cfg.FlagNamer("Manifest Nodes"), "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Manifest Nodes"), func() { req.Manifest = _Manifest })
	cmd.PersistentFlags().StringVar(&_Manifest.Authorization, cfg.FlagNamer("Manifest Authorization"), "", "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Manifest Authorization"), func() { req.Manifest = _Manifest })
	cmd.PersistentFlags().StringVar(&_Manifest.Authentication, cfg.FlagNamer("Manifest Authentication"), "", "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Manifest Authentication"), func() { req.Manifest = _Manifest })

	return cmd
}

func _RingServiceDeleteRingCommand(cfg *client.Config) *cobra.Command {
	req := &DeleteRingRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("DeleteRing"),
		Short: "DeleteRing RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService", "DeleteRing"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewRingServiceClient(cc)
				v := &DeleteRingRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.DeleteRing(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.Id, cfg.FlagNamer("Id"), "", "")

	return cmd
}

func _RingServicePublicKeyCommand(cfg *client.Config) *cobra.Command {
	req := &PublicKeyRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("PublicKey"),
		Short: "PublicKey RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService", "PublicKey"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewRingServiceClient(cc)
				v := &PublicKeyRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.PublicKey(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.Id, cfg.FlagNamer("Id"), "", "")

	return cmd
}

func _RingServiceRefreshCommand(cfg *client.Config) *cobra.Command {
	req := &RefreshRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("Refresh"),
		Short: "Refresh RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService", "Refresh"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewRingServiceClient(cc)
				v := &RefreshRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.Refresh(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.Id, cfg.FlagNamer("Id"), "", "")

	return cmd
}

func _RingServiceStateCommand(cfg *client.Config) *cobra.Command {
	req := &StateRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("State"),
		Short: "State RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService", "State"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewRingServiceClient(cc)
				v := &StateRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.State(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.Id, cfg.FlagNamer("Id"), "", "")

	return cmd
}

func _RingServiceListSecretsCommand(cfg *client.Config) *cobra.Command {
	req := &ListSecretsRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("ListSecrets"),
		Short: "ListSecrets RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService", "ListSecrets"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewRingServiceClient(cc)
				v := &ListSecretsRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.ListSecrets(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.RingId, cfg.FlagNamer("RingId"), "", "")

	return cmd
}

func _RingServiceStoreSecretCommand(cfg *client.Config) *cobra.Command {
	req := &StoreSecretRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("StoreSecret"),
		Short: "StoreSecret RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService", "StoreSecret"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewRingServiceClient(cc)
				v := &StoreSecretRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.StoreSecret(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.RingId, cfg.FlagNamer("RingId"), "", "")
	_Secret := &Secret{}
	flag.BytesBase64Var(cmd.PersistentFlags(), &_Secret.EncCmt, cfg.FlagNamer("Secret EncCmt"), "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Secret EncCmt"), func() { req.Secret = _Secret })
	flag.BytesBase64SliceVar(cmd.PersistentFlags(), &_Secret.EncScrt, cfg.FlagNamer("Secret EncScrt"), "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Secret EncScrt"), func() { req.Secret = _Secret })
	cmd.PersistentFlags().StringVar(&_Secret.AuthzCtx, cfg.FlagNamer("Secret AuthzCtx"), "", "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Secret AuthzCtx"), func() { req.Secret = _Secret })

	return cmd
}

func _RingServiceReencryptSecretCommand(cfg *client.Config) *cobra.Command {
	req := &ReencryptSecretRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("ReencryptSecret"),
		Short: "ReencryptSecret RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService", "ReencryptSecret"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewRingServiceClient(cc)
				v := &ReencryptSecretRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.ReencryptSecret(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.RingId, cfg.FlagNamer("RingId"), "", "")
	cmd.PersistentFlags().StringVar(&req.SecretId, cfg.FlagNamer("SecretId"), "", "")
	_RdrPk := &pb.PublicKey{}
	flag.EnumPointerVar(cmd.PersistentFlags(), &_RdrPk.Type, cfg.FlagNamer("RdrPk Type"), "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("RdrPk Type"), func() { req.RdrPk = _RdrPk })
	flag.BytesBase64Var(cmd.PersistentFlags(), &_RdrPk.Data, cfg.FlagNamer("RdrPk Data"), "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("RdrPk Data"), func() { req.RdrPk = _RdrPk })
	flag.BytesBase64Var(cmd.PersistentFlags(), &req.AcpProof, cfg.FlagNamer("AcpProof"), "")

	return cmd
}

func _RingServiceDeleteSecretCommand(cfg *client.Config) *cobra.Command {
	req := &DeleteSecretRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("DeleteSecret"),
		Short: "DeleteSecret RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "RingService", "DeleteSecret"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewRingServiceClient(cc)
				v := &DeleteSecretRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.DeleteSecret(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.RingId, cfg.FlagNamer("RingId"), "", "")
	cmd.PersistentFlags().StringVar(&req.SecretId, cfg.FlagNamer("SecretId"), "", "")
	flag.BytesBase64Var(cmd.PersistentFlags(), &req.AcpProof, cfg.FlagNamer("AcpProof"), "")

	return cmd
}
