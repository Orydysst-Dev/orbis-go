// Code generated by protoc-gen-cobra. DO NOT EDIT.

package v1alpha1

import (
	client "github.com/NathanBaulch/protoc-gen-cobra/client"
	flag "github.com/NathanBaulch/protoc-gen-cobra/flag"
	iocodec "github.com/NathanBaulch/protoc-gen-cobra/iocodec"
	cobra "github.com/spf13/cobra"
	grpc "google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
)

func SecretServiceClientCommand(options ...client.Option) *cobra.Command {
	cfg := client.NewConfig(options...)
	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("SecretService"),
		Short: "SecretService service client",
		Long:  "",
	}
	cfg.BindFlags(cmd.PersistentFlags())
	cmd.AddCommand(
		_SecretServiceListSecretsCommand(cfg),
		_SecretServiceStoreSecretCommand(cfg),
		_SecretServiceGetSecretCommand(cfg),
		_SecretServiceDeleteSecretCommand(cfg),
	)
	return cmd
}

func _SecretServiceListSecretsCommand(cfg *client.Config) *cobra.Command {
	req := &ListSecretsRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("ListSecrets"),
		Short: "ListSecrets RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "SecretService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "SecretService", "ListSecrets"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewSecretServiceClient(cc)
				v := &ListSecretsRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.ListSecrets(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.Key, cfg.FlagNamer("Key"), "", "")
	cmd.PersistentFlags().StringVar(&req.Value, cfg.FlagNamer("Value"), "", "")

	return cmd
}

func _SecretServiceStoreSecretCommand(cfg *client.Config) *cobra.Command {
	req := &StoreSecretRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("StoreSecret"),
		Short: "StoreSecret RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "SecretService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "SecretService", "StoreSecret"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewSecretServiceClient(cc)
				v := &StoreSecretRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.StoreSecret(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.Key, cfg.FlagNamer("Key"), "", "")
	cmd.PersistentFlags().StringVar(&req.Value, cfg.FlagNamer("Value"), "", "")

	return cmd
}

func _SecretServiceGetSecretCommand(cfg *client.Config) *cobra.Command {
	req := &GetSecretRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("GetSecret"),
		Short: "GetSecret RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "SecretService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "SecretService", "GetSecret"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewSecretServiceClient(cc)
				v := &GetSecretRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.GetSecret(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.Key, cfg.FlagNamer("Key"), "", "")

	return cmd
}

func _SecretServiceDeleteSecretCommand(cfg *client.Config) *cobra.Command {
	req := &DeleteSecretRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("DeleteSecret"),
		Short: "DeleteSecret RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "SecretService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "SecretService", "DeleteSecret"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewSecretServiceClient(cc)
				v := &DeleteSecretRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.DeleteSecret(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.Key, cfg.FlagNamer("Key"), "", "")

	return cmd
}
