syntax = "proto3";

package orbis.ring.v1alpha1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "libp2p/crypto/v1/crypto.proto";

service RingService {
  rpc ListRings(ListRingsRequest) returns (ListRingsResponse) {}
  rpc GetRing(GetRingRequest) returns (GetRingResponse) {}
  rpc CreateRing(CreateRingRequest) returns (CreateRingResponse) {}
  rpc DeleteRing(DeleteRingRequest) returns (google.protobuf.Empty) {}
  rpc PublicKey(PublicKeyRequest) returns (PublicKeyResponse) {}
  rpc Refresh(RefreshRequest) returns (RefreshResponse) {}
  rpc State(StateRequest) returns (StateResponse) {}
  rpc Nodes(NodesRequest) returns (NodesResponse) {}

  // rpc StoreSecret(StoreSecretRequest) returns (StoreSecretResponse) {}
  // rpc GetSecret(GetSecretRequest) returns (GetSecretResponse) {}
  // rpc DeleteSecret(DeleteSecretRequest) returns (DeleteSecretResponse) {}

  // rpc GetShares(GetSharesRequest) returns (GetSharesResponse) {}
}

//   rpc NewRing(manifest []byte, repo db.Repository) return (service.RingService
//   rpc Store(types.SecretID, *types.Secret, proof.VerifiableEncryption)
//   rpc Get(types.SecretID) (types.Secret, error) {
//   rpc GetShares(types.SecretID) ([]types.PrivSecretShare, error)
//   rpc Delete(types.SecretID)
//   rpc PublicKey() (crypto.PublicKey, error)
//   rpc Refresh(pss.Config) (pss.RefreshState, error)
//   rpc Threshold() int
//   rpc State() pss.State
//   rpc Nodes() []pss.Node
// }

message ListRingsRequest {}

message ListRingsResponse {
  repeated Ring rings = 1;
}

message CreateRingRequest {
  Ring ring = 1;
}

message CreateRingResponse {}

message GetRingRequest {
  string id = 1;
}

message GetRingResponse {
  Ring ring = 1;
}

message DeleteRingRequest {
  string id = 1;
}

message RefreshRequest {
  string id = 1;
}

message PublicKeyRequest {
  string id = 1;
}

message PublicKeyResponse {
  libp2p.crypto.v1.PublicKey public_key = 3;
}

message RefreshResponse {}

message StateRequest {
  string id = 1;
}

message StateResponse {
  string key = 1;
  string value = 2;
}

message NodesRequest {
  string id = 1;
}

message NodesResponse {
  repeated Node nodes = 1;
}

message Ring {
  string id = 1;
  int32 n = 2;
  int32 t = 3;
  string dkg = 5;
  string pss = 6;
  string pre = 7;
  string bulletin = 8;
  string transport = 9;

  repeated Node nodes = 10;
}

message Node {
  string id = 1;
  string address = 2; // multiaddress
  libp2p.crypto.v1.PublicKey public_key = 3;
}
