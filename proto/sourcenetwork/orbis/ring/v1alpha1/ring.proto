syntax = "proto3";

package orbis.ring.v1alpha1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "libp2p/crypto/v1/crypto.proto";

service RingService {
  rpc ListRings(ListRingsRequest) returns (ListRingsResponse) {}
  rpc GetRing(GetRingRequest) returns (GetRingResponse) {}
  rpc CreateRing(CreateRingRequest) returns (CreateRingResponse) {}
  rpc DeleteRing(DeleteRingRequest) returns (google.protobuf.Empty) {}
  rpc PublicKey(PublicKeyRequest) returns (PublicKeyResponse) {}
  rpc Refresh(RefreshRequest) returns (RefreshResponse) {}
  rpc State(StateRequest) returns (StateResponse) {}

  rpc ListSecrets(ListSecretsRequest) returns (ListSecretsResponse) {}
  rpc StoreSecret(StoreSecretRequest) returns (StoreSecretResponse) {}
  rpc GetSecret(GetSecretRequest) returns (GetSecretResponse) {}
  rpc DeleteSecret(DeleteSecretRequest) returns (google.protobuf.Empty) {}
}

message ListRingsRequest {}

message ListRingsResponse {
  repeated Ring rings = 1;
}

message CreateRingRequest {
  Ring ring = 1;
}

message CreateRingResponse {
  string id = 1;
}

message GetRingRequest {
  string id = 1;
}

message GetRingResponse {
  Ring ring = 1;
}

message DeleteRingRequest {
  string id = 1;
}

message RefreshRequest {
  string id = 1;
}

message PublicKeyRequest {
  string id = 1;
}

message PublicKeyResponse {
  libp2p.crypto.v1.PublicKey public_key = 1;
}

message RefreshResponse {}

message StateRequest {
  string id = 1;
}

message StateResponse {
  string dkg_state = 1;
  string pss_state = 2;
}

message ListSecretsRequest {
  string ring_id = 1;
}

message ListSecretsResponse {
  repeated Secret secrets = 1;
}

message StoreSecretRequest {
  string ring_id = 1;
  Secret secret = 2;
}

message StoreSecretResponse {
  string secret_id = 1;
  string ring_id = 2;
}
message GetSecretRequest {
  string secret_id = 1;
  string ring_id = 2;
}

message GetSecretResponse {
  Secret secret = 1;
}

message DeleteSecretRequest {
  string ring_id = 1;
  string secret_id = 2;
  bytes acp_proof = 3;
}

message ReencryptSecretRequest {
  string ring_id = 1;
  string secret_id = 2;
  string rdr_pk = 3;
  bytes acp_proof = 4;
}

message ReencryptSecretResponse {
  bytes xnc_cmt = 1; // reencryption commitment
  bytes enc_scrt = 2; // enncrypted secret
}

message Secret {
  bytes enc_cmt = 1; // encryption commitment
  bytes enc_scrt = 2; // enncrypted secret
}

message Ring {
  string id = 1;
  int32 n = 2;
  int32 t = 3;
  string dkg = 5;
  string pss = 6;
  string pre = 7;
  string bulletin = 8;
  string transport = 9;
  repeated Node nodes = 10;
  string authorization = 11;
  string authentication = 12;
}

message Node {
  string id = 1;
  string address = 2; // multiaddress
  libp2p.crypto.v1.PublicKey public_key = 3;
}
