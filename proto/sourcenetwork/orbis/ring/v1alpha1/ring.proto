syntax = "proto3";

package orbis.ring.v1alpha1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "libp2p/crypto/v1/crypto.proto";

service RingService {
  rpc ListRings(ListRingsRequest) returns (ListRingsResponse) {
    option (google.api.http) = {get: "/v1alpha1/rings"};
  }

  rpc GetRing(GetRingRequest) returns (GetRingResponse) {
    option (google.api.http) = {get: "/v1alpha1/rings/{id}"};
  }

  rpc CreateRing(CreateRingRequest) returns (CreateRingResponse) {
    option (google.api.http) = {
      post: "/v1alpha1/rings"
      body: "*"
    };
  }

  rpc DeleteRing(DeleteRingRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {delete: "/v1alpha1/rings/{id}"};
  }

  rpc PublicKey(PublicKeyRequest) returns (PublicKeyResponse) {
    option (google.api.http) = {get: "/v1alpha1/rings/{id}/public_key"};
  }

  rpc Refresh(RefreshRequest) returns (RefreshResponse) {
    option (google.api.http) = {post: "/v1alpha1/rings/{id}:refresh"};
  }

  rpc State(StateRequest) returns (StateResponse) {
    option (google.api.http) = {get: "/v1alpha1/rings/{id}:state"};
  }

  rpc ListSecrets(ListSecretsRequest) returns (ListSecretsResponse) {
    option (google.api.http) = {get: "/v1alpha1/rings/{ring_id}/secrets"};
  }

  rpc StoreSecret(StoreSecretRequest) returns (StoreSecretResponse) {
    option (google.api.http) = {
      post: "/v1alpha1/rings/{ring_id}/secrets"
      body: "secret"
    };
  }

  rpc ReencryptSecret(ReencryptSecretRequest) returns (ReencryptSecretResponse) {
    option (google.api.http) = {
      post: "/v1alpha1/rings/{ring_id}/secrets/{secret_id}:reencrypt"
      body: "*"
    };
  }

  rpc DeleteSecret(DeleteSecretRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {delete: "/v1alpha1/rings/{ring_id}/secrets/{secret_id}"};
  }
}

message ListRingsRequest {}

message ListRingsResponse {
  repeated Ring rings = 1;
}

message CreateRingRequest {
  Manifest manifest = 1;
}

message CreateRingResponse {
  string id = 1;
}

message GetRingRequest {
  string id = 1;
}

message GetRingResponse {
  Ring ring = 1;
}

message DeleteRingRequest {
  string id = 1;
}

message RefreshRequest {
  string id = 1;
}

message PublicKeyRequest {
  string id = 1;
}

message PublicKeyResponse {
  libp2p.crypto.v1.PublicKey public_key = 1;
}

message RefreshResponse {}

message StateRequest {
  string id = 1;
}

message StateResponse {
  repeated ServiceState services = 1;
}

message ServiceState {
  string name = 1;
  string state = 2;
}

message ListSecretsRequest {
  string ring_id = 1;
}

message ListSecretsResponse {
  repeated Secret secrets = 1;
}

message StoreSecretRequest {
  string ring_id = 1;
  Secret secret = 2;
}

message StoreSecretResponse {
  string secret_id = 1;
}
message DeleteSecretRequest {
  string ring_id = 1;
  string secret_id = 2;
  bytes acp_proof = 3;
}

message ReencryptSecretRequest {
  string ring_id = 1;
  string secret_id = 2;
  libp2p.crypto.v1.PublicKey rdr_pk = 3;
  bytes acp_proof = 4;
}

// Reencryption commitment recovered from verified secret shares, and encrypted secret
message ReencryptSecretResponse {
  bytes xnc_cmt = 1; // reencryption commitment
  repeated bytes enc_scrt = 2; // enncrypted secret
}

message Secret {
  bytes enc_cmt = 1; // encryption commitment
  repeated bytes enc_scrt = 2; // enncrypted secret
  string authz_ctx = 3; // authorization context
}

message ReencryptedSecretShare {
  string ring_id = 1;
  string secret_id = 2;
  libp2p.crypto.v1.PublicKey rdr_pk = 3;
  int32 index = 4;
  bytes xnc_ski = 5; // reencrypted share
  bytes chlgi = 6; // challenge
  bytes proofi = 7; // proof
}

message Ring {
  string id = 1;
  Manifest manifest = 2;
}

message Manifest {
  int32 n = 1;
  int32 t = 2;
  string dkg = 3;
  string pss = 4;
  string pre = 5;
  string bulletin = 6;
  string transport = 7;
  repeated Node nodes = 8;
  string authorization = 9;
  string authentication = 10;
  int32 nonce = 11;
}

message Node {
  string id = 1;
  string address = 2; // multiaddress
  libp2p.crypto.v1.PublicKey public_key = 3;
}
