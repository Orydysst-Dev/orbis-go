syntax = "proto3";

package orbis.transport.v1alpha1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "libp2p/crypto/v1/crypto.proto";

service TransportService {
  // GetHost returns the information about the host node.
  rpc GetHost(GetHostRequest) returns (GetHostResponse) {}

  // Connect connects to a peer node.
  rpc Connect(ConnectRequest) returns (ConnectResponse) {}

  // Send sends a message to a peer node.
  rpc Send(SendRequest) returns (SendResponse) {}

  // Gossip broadcasts a message to a topic.
  rpc Gossip(GossipRequest) returns (GossipResponse) {}

  // NewMessage returns a formated messages.
  rpc NewMessage(NewMessageRequest) returns (NewMessageResponse) {}
}

message GetHostRequest {
  string transport = 1;
}

message GetHostResponse {
  Node node = 1;
}

message SendRequest {
  Node node = 1;
  Message message = 2;
}

message SendResponse {}

message ConnectRequest {
  string transport = 1;
  string id = 2;
  string address = 3; // multiaddress
}

message ConnectResponse {}

message GossipRequest {
  string transport = 1;
  string topic = 2;
  Message message = 3;
}

message GossipResponse {}

message NewMessageRequest {
  string transport = 1;
  string id = 2;
  bool gossip = 3;
  bytes payload = 4;
  string type = 5;
  string ring_id = 6;
}

message NewMessageResponse {
  Message message = 1;
}

message Node {
  string id = 1;
  string address = 2; // multiaddress
  libp2p.crypto.v1.PublicKey public_key = 3;
}

message Message {
  int64 timestamp = 1; // unix time
  string id = 2; // message id
  string type = 3; // message type
  bytes payload = 4; // generic payload
  bool gossip = 5; // gossip message over pubsub
  string node_id = 6; // author node id (peer.ID)
  bytes node_pub_key = 7; // authoring node pubkey (32bytes)
  string ring_id = 8; //
  bytes signature = 9; // signature of the message (including payload)
  string target_id = 10; // id of target
  bytes target_pub_key = 11; // pubkey of target
}
